What's the difference between JavaScript and Java ?

Java and Javascript are similar like Car and Carpet are similar.

One is essentially a toy, designed for writing small pieces of code, and traditionally used and abused by inexperienced programmers.

The other is a scripting language for web browsers.

Here are some differences between the two languages:

Here are some features that I think are particular strengths of JavaScript:

Take a look at the Wikipedia link 

JavaScript, despite the name, is essentially unrelated to the Java programming language, although both have the common C syntax, and JavaScript copies many Java names and naming conventions. The language was originally named "LiveScript" but was renamed in a co-marketing deal between Netscape and Sun, in exchange for Netscape bundling Sun's Java runtime with their then-dominant browser. The key design principles within JavaScript are inherited from the Self and Scheme programming languages.

JavaScript was named this way by Netscape to confuse the unwary into thinking it had something to do with Java, the buzzword of the day, and it succeeded.

The two languages are entirely distinct.

Java is to JavaScript as ham is to hamster

JavaScript is an object-oriented scripting language that allows you to create dynamic HTML pages, allowing you to process input data and maintain data, usually within the browser.

Java is a programming language, core set of libraries, and virtual machine platform that allows you to create compiled programs that run on nearly every platform, without distribution of source code in its raw form or recompilation.

While the two have similar names, they are really two completely different programming languages/models/platforms, and are used to solve completely different sets of problems.

Also, this is directly from the Wikipedia Javascript article:

A common misconception is that JavaScript is similar or closely related to Java; this is not so. Both have a C-like syntax, are object-oriented, are typically sandboxed and are widely used in client-side Web applications, but the similarities end there. Java has static typing; JavaScript's typing is dynamic (meaning a variable can hold an object of any type and cannot be restricted). Java is loaded from compiled bytecode; JavaScript is loaded as human-readable code. C is their last common ancestor language.

In addittion to being entirely different languages, in my experience:

(But this may just have more to do with my preference of functional programming over OO programming... ;)

Everything. They're unrelated languages.

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.

Like everybody's saying, they're pretty much entirely different.

However, if you need a scripting language for your Java application, Javascript is actually a really good choice.  There are ways to get Javascript running in the JVM and you can access and manipulate Java classes pretty seamlessly once you do. 

They have nothing to do with each other.

Java is statically typed, compiles, runs on its own VM.

Javascript is dynamically typed, interpreted, and runs in a browser. It also has first-class functions and anonymous functions, which Java does not. It has direct access to web-page elements, which makes it useful for doing client-side processing.

They are also somewhat similar in syntax, but that's about it.

Don't be confused with name..
Java was created at Sun/ORG Microsystems/ORG (now Oracle).
But, JavaScript was created at Netscape (now Mozilla) in the early days of the Web, and technically, “Java-Script” is a trademark licensed from Sun Microsystems used to describe
Netscape’s implementation of the language. Netscape submitted the
language for standardization to ECMA (European/ORG Computer/ORG Manufacturer's/ORG Association/ORG)
and because of trademark issues, the standardized version of the language
was stuck with the awkward name “ECMAScript.” For the same trademark reasons,
Microsoft’s version of the language is formally known as “JScript.” In practice, just
about everyone calls the language JavaScript. The real name is “ECMAScript”.  

Both are fully different languages!!!

Practically every PC in the world sells with at least one JavaScript interpreter installed on it.

Most (but not "practically all") PCs have a Java VM installed.

A Re-Introduction to Javascript by the Mozilla team (they make Firefox) should explain it.

I have a JPanel with a painted background image and a layout manager holding other smaller images, all of this inside a JFrame. The background image is pretty big and I want to be able to have it maintain its aspect ratio whether its on a big or small monitor. 

Eventually, I want to be able to have my LayoutManager  and the smaller images in its cells "glued" to the background picture.

I looked around for resources and it seems that many examples use a BufferedImage but I am not; will this pose a problem? I'll post my code below for painting the image, If I lack any information please let me know.

I should mention that I know the aspect ratio formula:
 original height / original width x new width = new height
However, I do not know how to use that correctly to my advantage.

Place the file in directory structure matching your package name (after extracting .jar/MISC file/MISC, it should be in the same directory as .class/MISC file/MISC), then access it using getClass().getResourceAsStream("file.txt")

Place the file at the root (after extracting .jar file, it should be in the root), then access it using Thread.currentThread().getContextClassLoader().getResourceAsStream("file.txt")

The first option may not work when jar is used as a plugin.

You could also just use java.nio. Here is an example to slurp in text from a file at resourcePath in classpath:

Make sure that you  work with the correct separator. I replaced all / in a relative path with a File.separator. This worked fine in the IDE, however did not work in the build JAR.

If you are using spring, then you can use the the following method to read file from src/main/resources:

I had this problem before and I made fallback way for loading. Basically first way work within .jar/MISC file/MISC and second way works within eclipse or other IDE.

I've developed an HTML page that sends information to a Servlet. In the Servlet, I am using the methods doGet() and doPost():

In the html page code that calls the Servlet is:

When I use method = "get" in the Servlet, I get the value of id and password, however when using method = "post", id and password are set to null. Why don't I get the values in this case?

Another thing I'd like to know is how to use the data generated or validated by the Servlet. For example, if the Servlet shown above authenticates the user, I'd like to print the user id in my HTML/MISC page/MISC . I should be able to send the string 'id' as a response and use this info in my HTML/MISC page/MISC . Is it possible?

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.

You should use doGet() when you want to intercept on HTTP/MISC GET/MISC requests/MISC . You should use doPost() when you want to intercept on HTTP/MISC POST/MISC requests/MISC . That's all. Do not port the one to the other or vice versa (such as in Netbeans ' unfortunate auto-generated processRequest() method). This makes no utter sense.

Usually, HTTP/MISC GET/MISC requests/MISC are idempotent. I.e. you get exactly the same result everytime you execute the request (leaving authorization/authentication and the time-sensitive nature of the page —search results, last news, etc— outside consideration). We can talk about a bookmarkable request. Clicking a link, clicking a bookmark, entering raw URL in browser address bar, etcetera will all fire a HTTP/MISC GET/MISC request/MISC . If a Servlet is listening on the URL in question, then its doGet() method will be called. It's usually used to preprocess a request. I.e. doing some business stuff before presenting the HTML output from a JSP, such as gathering data for display in a table.

Also view/edit detail links as shown in last column above are usually idempotent.

HTTP/MISC POST/MISC requests/MISC are not idempotent. If the enduser has submitted a POST/MISC form/MISC on an URL/MISC beforehand, which hasn't performed a redirect, then the URL is not necessarily bookmarkable. The submitted form data is not reflected in the URL. Copypasting the URL into a new browser window/tab may not necessarily yield exactly the same result as after the form submit. Such an URL is then not bookmarkable. If a Servlet is listening on the URL in question, then its doPost() will be called. It's usually used to postprocess a request. I.e. gathering data from a submitted HTML/MISC form/MISC and doing some business stuff with it (conversion, validation, saving in DB, etcetera). Finally usually the result is presented as HTML/MISC form/MISC the forwarded JSP/MISC page/MISC .

...which can be used in combination with this piece of Servlet:

You see, if the User is found in DB (i.e. username and password are valid), then the User will be put in session scope (i.e. "logged in") and the servlet will redirect to some main page (this example goes to http://example.com/contextname/home), else it will set an error message and forward the request back to the same JSP page so that the message get displayed by ${error}.

You can if necessary also "hide" the login.jsp in /WEB-INF/login.jsp so that the users can only access it by the servlet. This keeps the URL clean http://example.com/contextname/login. All you need to do is to add a doGet() to the servlet like this:

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.

(and update the same line in doPost() accordingly)

That said, I am not sure if it is just playing around and shooting in the dark, but the code which you posted doesn't look good (such as using compareTo() Iinstead of equals() and digging in the parameternames instead of just using getParameter() and the id and password seems to be declared as servlet/MISC instance/MISC variables/MISC — which is NOT threadsafe). So I would strongly recommend to learn a bit more about basic Java/MISC SE/MISC API/MISC using the Oracle tutorials (check the chapter "Trails Covering the Basics") and how to use JSP/Servlets the right way using those tutorials.

In this last case, you absolutely must do the work yourself, and using System.arraycopy is really the only way to do it since it's going to choose the best possibly way to move memory for your computer architecture--it should be many times faster than any code you could reasonably write yourself.

It depends on what you mean by "remove"? An array is a fixed size construct - you can't change the number of elements in it. So you can either a) create a new, shorter, array without the elements you don't want or b) assign the entries you don't want to something that indicates their 'empty' status; usually null if you are not working with primitives.

In the first case create a List from the array, remove the elements, and create a new array from the list. If performance is important iterate over the array assigning any elements that shouldn't be removed to a list, and then create a new array from the list. In the second case simply go through and assign null to the array entries.

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.

Arrgh, I can't get the code to show up correctly. Sorry, I got it working. Sorry again, I don't think I read the question properly.

Will copy all elements except the one with index i:

Use: 

Assign null to the array locations.

I wonder if anyone could tell me how casting works? I understand when I should do it, but not really how it works. On primitive data types I understand partially but when it comes to casting objects I don't understand how it works.

How can a object with the type Object just suddenly be cast to, let's say, MyType (just an example) and then get all the methods?

Casting in Java/ isn't magic, it's you telling the compiler that an Object of type A is actually of more specific type B, and thus gaining access to all the methods on B that you wouldn't have had otherwise. You're not performing any kind of magic or conversion when performing casting, you're essentially telling the compiler "trust me, I know what I'm doing and I can guarantee you that this Object at this line is actually an <Insert cast type here>." For example:

The above is fine, not magic and all well. The object being stored in o is actually a string, and therefore we can cast to a string without any problems.

There's two ways this could go wrong. Firstly, if you're casting between two types in completely different inheritance hierarchies then the compiler will know you're being silly and stop you:

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.

Secondly, if they're in the same hierarchy but still an invalid cast then a ClassCastException will be thrown at runtime:

This essentially means that you've violated the compiler's trust. You've told it you can guarantee the object is of a particular type, and it's not.

Why do you need casting? Well, to start with you only need it when going from a more general type to a more specific type. For instance, Integer inherits from Number , so if you want to store an Integer as a Number then that's ok (since all Integers are Numbers .) However, if you want to go the other way round you need a cast - not all Numbers are Integers (as well as Integer we have Double, Float , Byte , Long , etc.) And even if there's just one subclass in your project or the JDK, someone could easily create another and distribute that, so you've no guarantee even if you think it's a single, obvious choice!

Regarding use for casting, you still see the need for it in some libraries. Pre Java-5 it was used heavily in collections and various other classes, since all collections worked on adding objects and then casting the result that you got back out the collection. However, with the advent of generics much of the use for casting has gone away - it has been replaced by generics which provide a much safer alternative, without the potential for ClassCastExceptions (in fact if you use generics cleanly and it compiles with no warnings, you have a guarantee that you'll never get a ClassCastException.)

Actually, casting doesn't always work. If the object is not an instanceof the class you're casting it to you will get a ClassCastException at runtime.

Suppose you wanted to cast a String to a File (yes it does not make any sense), you cannot cast it directly because the File class is not a child and not a parent of the String class (and the compiler complains). But you could cast your String to Object , because a String is an Object (Object is parent). Then you could cast this object to a File, because a File is an Object . So all you operations are 'legal' from a typing point of view at compile time, but it does not mean that it will work at runtime !

The compiler will allow this even if it does not make sense, but it will crash at runtime with this exception:

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.

Casting a reference will only work if it's an instanceof that type. You can't cast random references. Also, you need to read more on Casting Objects .

You can visit to http://www.youstupidcoder.com/2017/07/type-casting.html?m=1 to understand the what is type casting and what is the need of type casting??

I am trying to get Eclipse/MISC v3.5/MISC (Galileo) to re-run on my computer - I have run it before with no problems, but now I keep getting this error:

A Java/MISC Runtime/MISC Environment/MISC (JRE) or Java/MISC Development/MISC Kit/MISC (JDK) must be available in order to run Eclipse. No Java/MISC Virtual/MISC Machine/MISC was found after searching the following locations:
  C:\eclipse\jre\javaw.exe
  javaw.exe in your current PATH

I've just done a fresh install of both the JDK and the SDK.

I have Windows/MISC 7/MISC (x64/MISC).

What's up with this? How do I fix it?

I can't run any of the ipconfig / tracert / or ping.

Eclipse will by default try to launch with the default "java.exe" (the first one referenced by your PATH)

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.

Three things to remember:

June 2012, jmbertucci comments:

I'm running Windows/MISC 7/MISC 64-bit/MISC and I had the 32-bit/MISC JRE/MISC installed.
  I downloaded Eclipse/MISC 64-bit/MISC which looks for a 64-bit/MISC JRE/MISC .
  Because I didn't have the 64-bit/MISC JRE/MISC it threw the error, which makes sense.

They are independent languages with unrelated lineages. Brendan/MISC Eich/MISC created Javascript originally at Netscape. It was initially called Mocha. The choice of Javascript as a name was a nod, if you will, to the then ascendant Java programming language, developed at Sun by Patrick/MISC Naughton/MISC, James/MISC Gosling/MISC , et. al.
